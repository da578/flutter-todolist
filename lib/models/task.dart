import 'package:isar/isar.dart';

part 'task.g.dart';

/// Model to represent a task with its details, status, priority, and time-related metadata.
///
/// This class is used in conjunction with Isar as a database collection. Each property in this model
/// is represented in the Isar database and can be efficiently accessed using queries.
@collection
class Task {
  /// Unique ID for each task. This value is auto-generated by Isar if not provided.
  Id id = Isar.autoIncrement;

  /// The name of the task (required). This property must always be provided when creating a Task object.
  String name;

  /// A description of the task (optional). Defaults to an empty string if not provided.
  String description;

  /// The order of the task (optional). Used to determine the display order of tasks in a list.
  bool status;

  /// The order of the task (optional). Used to determine the display order of tasks in a list.
  int? order;

  /// Reminder time for the task (optional). Represented in ISO 8601 format.
  DateTime? reminder;

  /// Deadline for completing the task (optional). Represented in ISO 8601 format.
  DateTime? deadline;

  /// Timestamp of when the task was created. Automatically populated when the Task object is created.
  DateTime? onCreated;

  /// Timestamp of when the task was last updated. Automatically populated when the Task object is updated.
  DateTime? onUpdated;

  /// Constructor to create a new Task object.
  ///
  /// - [name]: The name of the task (required).
  /// - [description]: A description of the task (default: empty string).
  /// - [status]: Completion status of the task (default: `false`).
  /// - [order]: Display order of the task (optional).
  /// - [reminder]: Reminder time for the task (optional).
  /// - [deadline]: Deadline for the task (optional).
  /// - [onCreated]: Creation timestamp (automatically set if not provided).
  /// - [onUpdated]: Last update timestamp (automatically set if not provided).
  Task({
    this.id = Isar.autoIncrement,
    required this.name,
    this.description = '',
    this.status = false,
    this.order,
    this.reminder,
    this.deadline,
    this.onCreated,
    this.onUpdated,
  }) {
    onCreated ??= DateTime.now();
    onUpdated ??= onCreated;
  }

  /// Converts the Task object into a JSON-compatible Map&lt;String, dynamic&gt; representation.
  ///
  /// Date properties such as `reminder`, `deadline`, `onCreated`, and `onUpdated`
  /// are converted to ISO 8601 strings to ensure compatibility with JSON format.
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'status': status,
      'order': order,
      'reminder': reminder?.toIso8601String(),
      'deadline': deadline?.toIso8601String(),
      'onCreated': onCreated?.toIso8601String(),
      'onUpdated': onUpdated?.toIso8601String(),
    };
  }

  /// Creates a Task object from a JSON-compatible Map&lt;String, dynamic&gt; representation.
  ///
  /// Date properties such as `reminder`, `deadline`, `onCreated`, and `onUpdated`
  /// are parsed from ISO 8601 strings into `DateTime` objects.
  ///
  /// Example input JSON:
  /// ```json
  /// {
  ///   "id": 1,
  ///   "name": "Important Task",
  ///   "description": "This is a task description.",
  ///   "status": false,
  ///   "order": 5,
  ///   "reminder": "2024-01-01T12:00:00Z",
  ///   "deadline": "2024-01-02T12:00:00Z",
  ///   "onCreated": "2023-12-31T08:00:00Z",
  ///   "onUpdated": "2024-01-01T10:00:00Z"
  /// }
  /// ```
  factory Task.fromJson(Map<String, dynamic> json) {
    return Task(
      id: json['id'] as Id? ?? Isar.autoIncrement,
      name: json['name'] as String,
      description: json['description'] as String? ?? '',
      status: json['status'] as bool? ?? false,
      order: json['order'] as int?,
      reminder:
          json['reminder'] == null
              ? null
              : DateTime.parse(json['reminder'] as String),
      deadline:
          json['deadline'] == null
              ? null
              : DateTime.parse(json['deadline'] as String),
      onCreated:
          json['onCreated'] == null
              ? null
              : DateTime.parse(json['onCreated'] as String),
      onUpdated:
          json['onUpdated'] == null
              ? null
              : DateTime.parse(json['onUpdated'] as String),
    );
  }

  /// Updates the `onUpdated` timestamp to the current time.
  ///
  /// This method is useful for tracking when a task was last modified.
  void updateTimestamp() => onUpdated = DateTime.now();
}
